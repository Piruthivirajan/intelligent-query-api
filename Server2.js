require('dotenv').config();
const express = require('express');
const cors = require('cors');
const mysql = require('mysql');
const axios = require('axios');

const app = express();
app.use(cors());
app.use(express.json());

// Database connection using environment variables
const db = mysql.createConnection({
    host: process.env.DB_HOST,
    user: process.env.DB_USER,
    password: process.env.DB_PASSWORD,
    database: process.env.DB_NAME,
});

db.connect((err) => {
    if (err) throw err;
    console.log("Connected to MySQL database.");
});

// Function to fetch response from Hugging Face model with retry logic
async function fetchModelResponse(url, data, headers, retries = 3, delay = 5000) {
    for (let i = 0; i < retries; i++) {
        try {
            const response = await axios.post(url, data, { headers });
            return response.data;
        } catch (error) {
            if (error.response && error.response.status === 503) {
                console.log(`Model is loading, retrying in ${delay / 1000} seconds...`);
                await new Promise((resolve) => setTimeout(resolve, delay));
            } else {
                throw error;
            }
        }
    }
    throw new Error('Model did not become available in time.');
}

app.post('/dynamic-search', async (req, res) => {
    const userQuery = req.body.query;

    // Database schema context with an example for better accuracy
    const schemaContext = `
      Table: UserInfo
      - UserID, UserName, Password, Token, UserType, ClientID, Version, Status, CreatedBy, CreatedOn, ModifiedBy, ModifiedOn

      Table: UserInstitutionDetails
      - EmailId, Name, RollNumber, Institution, Campus, Department, Degree, YearOfPassing, Section, Gender, DOB, FatherName, MotherName, Address1, Address2
    `;

    // Refined prompt to guide the model toward a more accurate SQL generation
    const sqlPrompt = `
      Based on the following database schema:
      ${schemaContext}

      The user asked: "${userQuery}"
      Write a valid SQL query to retrieve the requested information.
      Example output:
      "SELECT UserName, EmailId FROM UserInfo INNER JOIN UserInstitutionDetails ON UserInfo.UserID = UserInstitutionDetails.UserID WHERE UserName = 'John';"
    `;

    const modelUrl = 'https://api-inference.huggingface.co/models/mrm8488/t5-small-finetuned-wikiSQL';  // Updated model endpoint
    const headers = { Authorization: `Bearer ${process.env.HUGGINGFACE_API_KEY}` };
    const requestData = { inputs: sqlPrompt };

    try {
        // Fetch SQL generation response from the model with retry logic
        const modelResponse = await fetchModelResponse(modelUrl, requestData, headers);
        
        // Log the entire model response for debugging
        console.log("Model Response:", modelResponse);

        // Extract generated text from the array and validate it
        const sqlQuery = modelResponse[0]?.generated_text?.trim();
        if (!sqlQuery || !sqlQuery.toLowerCase().startsWith("select")) {
            throw new Error('No valid SQL query generated by the model.');
        }

        // Execute the SQL query generated by the model
        db.query(sqlQuery, async (error, results) => {
            if (error) {
                console.error('SQL Execution Error:', error);
                return res.json({ response: 'Error executing SQL query.' });
            }

            // Format the result for model interpretation
            const resultText = results.length > 0 ? JSON.stringify(results) : "No records found.";
            const responsePrompt = `
              The user requested: "${userQuery}"
              The SQL query result is: ${resultText}
              Provide a user-friendly response based on the result.
            `;

            // Fetch interpretation of the SQL result
            const interpretationResponse = await fetchModelResponse(modelUrl, { inputs: responsePrompt }, headers);
            const finalResponse = interpretationResponse[0]?.generated_text?.trim() || "No response generated.";
            res.json({ response: finalResponse });
        });
    } catch (error) {
        console.error('Error:', error);
        res.status(500).json({ response: 'Error generating or interpreting SQL query.' });
    }
});

const PORT = 5000;
app.listen(PORT, () => {
    console.log(`Server is running on http://localhost:${PORT}`);
});
