require('dotenv').config();
const express = require('express');
const cors = require('cors');
const mysql = require('mysql');
const OpenAI = require('openai');

const app = express();
app.use(cors());
app.use(express.json());

// Initialize OpenAI client with v4 syntax
const openai = new OpenAI({
    apiKey: process.env.OPENAI_API_KEY,
});

// Database connection using environment variables
const db = mysql.createConnection({
    host: process.env.DB_HOST,
    user: process.env.DB_USER,
    password: process.env.DB_PASSWORD,
    database: process.env.DB_NAME,
});

db.connect((err) => {
    if (err) throw err;
    console.log("Connected to MySQL database.");
});

app.post('/dynamic-search', async (req, res) => {
    const userQuery = req.body.query;

    // Dynamic database schema context for GPT
    const schemaContext = `
      Table: UserInfo
      - UserID, UserName, Password, Token, UserType, ClientID, Version, Status, CreatedBy, CreatedOn, ModifiedBy, ModifiedOn

      Table: UserInstitutionDetails
      - EmailId, Name, RollNumber, Institution, Campus, Department, Degree, YearOfPassing, Section, Gender, DOB, FatherName, MotherName, Address1, Address2
      `;

    // GPT prompt to generate a SQL query based on the user's input
    const sqlPrompt = `
      You are an SQL assistant for a MySQL database. Based on this schema:
      ${schemaContext}

      The user has asked: "${userQuery}"
      Generate an SQL query to fetch the relevant information from the tables.
    `;

    try {
        // Use OpenAI to generate SQL query dynamically
        const sqlGenerationResponse = await openai.chat.completions.create({
            model: 'gpt-4o-mini-2024-07-18',
            messages: [
                { role: 'system', content: 'Generate SQL queries based on the provided schema for various user queries.' },
                { role: 'user', content: sqlPrompt },
            ],
            max_tokens: 150,
            temperature: 0,
        });

        const sqlQuery = sqlGenerationResponse.choices[0].message.content.trim();

        // Execute the SQL query generated by GPT
        db.query(sqlQuery, async (error, results) => {
            if (error) {
                console.error('SQL Execution Error:', error);
                return res.json({ response: 'Error executing SQL query.' });
            }

            // Format the result for GPT interpretation
            const resultText = results.length > 0 ? JSON.stringify(results) : "No records found.";
            const responsePrompt = `
              The user requested: "${userQuery}"
              The SQL query result is: ${resultText}
              Interpret this result and craft a user-friendly response based on the context.
            `;

            // Use OpenAI again to interpret and respond based on SQL results
            const interpretationResponse = await openai.chat.completions.create({
                model: 'gpt-4o-mini-2024-07-18',
                messages: [
                    { role: 'system', content: 'Interpret SQL query results and respond naturally to user queries.' },
                    { role: 'user', content: responsePrompt },
                ],
                max_tokens: 150,
                temperature: 0,
            });

            const finalResponse = interpretationResponse.choices[0].message.content.trim();
            res.json({ response: finalResponse });
        });
    } catch (error) {
        console.error('Error:', error);
        res.status(500).json({ response: 'Error generating or interpreting SQL query.' });
    }
});

const PORT = 5000;
app.listen(PORT, () => {
    console.log(`Server is running on http://localhost:${PORT}`);
});